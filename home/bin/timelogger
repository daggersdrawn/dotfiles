#!/usr/bin/python2
import argparse
import datetime
import os
import re
import requests
import sys

if sys.version[0] == "3":
    raw_input = input


class TimeLogger(object):
    """
    Log your time to a redmine project.

    To use, install requests and set the environemnt variables in your ~/.bashrc
        pip install requests
        export REDMINE_USERNAME="username"
        export REDMINE_PASSWORD="password"
    """
    def __init__(self, data):
        self.data = data
        self.session = requests.session()
        self.headers = {
            "User-Agent": "Mozilla/5.0",
            "Host": "proyectos.internet.int"
        }

    def login_redmine(self):
        if hasattr(self, "logged_in"):
            return
        username = os.environ.get("REDMINE_USERNAME")
        password = os.environ.get("REDMINE_PASSWORD")
        url = "http://proyectos.internet.int/login"
        self.session.get(url, headers=self.headers)
        payload = {
            "username": username,
            "password": password,
        }
        self.headers["Referer"] = url
        response = self.session.post(url, data=payload, headers=self.headers)
        if "http://proyectos.internet.int/my/page" not in response.text:
            print("Not logged in")
            sys.exit()
        self.logged_in = True

    def prompt_for_input(self):
        print("Press enter to skip and use defaults.")
        project = raw_input("Project number (1 Core, 2 Marca, 3 ElMundo, 4 Expansion, 5 Telva): ")
        if project:
            self.data.project = project

        activity = raw_input("Activity number (1 bug, 2 feature, 3 support, "
                             " 4 ops, 5 design, 6 meeting, 7 analysis, 8 management, 9 course): ")
        if activity:
            self.data.activity = activity

        time = raw_input("Time (ex. 7.2): ")
        if time:
            self.data.time = time

        message = raw_input("Message (ex. fixed bug): ")
        if message:
            self.data.message = message

        day = raw_input("Day (ex. 2013-04-21): ")
        if day:
            self.data.day = day

        run_again = raw_input("Log more hours (y/n)?: ")
        if run_again == "y".lower():
            self.data.run_again = True

    def validate_input(self):
        # validate project
        if self.data.project not in [str(i) for i in range(5)]:
            print("--project argument must be a number: "
                  "1 Comunidad, 2 Core, 3 Marca, 4 ElMundo, 5 Expansion, 6 Telva")
            sys.exit()
        projects = {
            "0": "30",
            "1": "56",
            "2": "59",
            "3": "60",
            "4": "58",
            "5": "61",
        }
        self.data.project = projects[str(int(self.data.project) - 1)]
        # validate activity
        if self.data.activity not in [str(i) for i in range(1, 10)]:
            print("--activity argument must be a number (1 bug, 2 feature, 3 support, "
                  "4 ops, 5 design, 6 meeting, 7 analysis, 8 management, 9 course)")
            sys.exit()

        # validate day
        try:
            split_date = self.data.day.split("-")
            [int(i) for i in split_date]  # test_int_conversion
            if len(split_date[0]) != 4 or len(split_date[1]) != 2 or len(split_date[2]) != 2:
                print("--day argument must be in the format YYYY-MM-DD.")
                sys.exit()
        except ValueError:
            print("--day argument must be in the format YYYY-MM-DD. "
                  " Where the characters are replaced with numbers.")
            sys.exit()

    def log_time(self):
        form_url = "http://proyectos.internet.int/recordhours/new"
        post_url = "http://proyectos.internet.int/recordhours"
        response = self.session.get(form_url, headers=self.headers, allow_redirects=True)
        match = 'authenticity_token\"\ type="hidden" value="(.+?)" /></div'
        authenticity_token = re.search(match, response.text).group(1)
        payload = {
            "authenticity_token": authenticity_token,
            "record_hours[project_id]": self.data.project,
            "record_hours[tracker_id]": self.data.activity,
            "record_hours[hours]": self.data.time,
            "record_hours[comment]": self.data.message,
            "record_hours[day]": self.data.day,
            "commit": "Add",

        }
        self.headers["Referer"] = form_url
        response = self.session.post(post_url, data=payload, headers=self.headers,
                                     allow_redirects=True)
        if args.run_again:
            print("Running the timelogger again: \n")
            self.run_again()

    def run_again(self):
        self.data.project = "1"
        self.data.activity = "2"
        self.data.time = "7.2"
        self.data.message = ""
        self.data.day = datetime.datetime.now().strftime("%Y-%m-%d")
        self.data.run_again = False
        self.prompt_for_input()
        self.log_time()
        self.validate_input()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="This script logs time to redmine.")
    parser.add_argument(
        "-p", "--project", dest="project", default="1",
        help="The project to log hours to. Default is 1 for Comunidad.\
        Options (1 Comunidad, 2 Core, 3 Marca, 4 ElMundo, 5 Expansion, 6 Telva).")
    parser.add_argument(
        "-a", "--activity", dest="activity", default="2",
        help="The activity type to log, as an integer. Default is 2 for feature.\
             Options (1 bug, 2 feature, 3 support, 4 ops, 5 design, 6 meeting,  \
             7 analysis, 8 management, 9 course).")
    parser.add_argument(
        "-t", "--time", dest="time", default="7.2",
        help="The amount of hours to log. Default is 7.2 hours.")
    parser.add_argument(
        "-m", "--message", dest="message", default="",
        help="A message to go along with the logged hours. Default is blank.")
    parser.add_argument(
        "-d", "--day", dest="day", default=datetime.datetime.now().strftime("%Y-%m-%d"),
        help="The day to log the time for in the format YYYY-MM-DD. Default is today.")
    parser.add_argument(
        "--use-prompt", dest="use_prompt", default=False, action="store_true",
        help="Prompt for user input, useful as a shutdown script. Default is False.")
    args = parser.parse_args()

    args.run_again = False
    if args.use_prompt:
        use_defaults = raw_input("Use defaults of 7.2 hrs, logged to the Core project, "
                                 "without message, for today (y/n):")
        if use_defaults == "n".lower():
            args.use_prompt = True
        else:
            args.use_prompt = False
    logger = TimeLogger(args)
    if args.use_prompt:
        logger.prompt_for_input()
    logger.validate_input()
    logger.login_redmine()
    logger.log_time()
